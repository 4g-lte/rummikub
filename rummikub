#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<Windows.h> 

struct card//카드들의 구조체
{
    char* color;
    int num;
    int jocker;
    int use;
}; 

struct playercard {//플레이어의 카드
    int enroll;//등록여부를 조사한다.
    struct card* owncard[60];//player가 가지고 있는 카드;
    int win;
}; 

void putkeep(struct card** keep, struct card* setting);
//주머니에 카드를 넣는다.
//setting에는 나중에 정리하기위해 '0'으로 표시해준다.
void takeoutkepp(struct card* keep, struct card** setting, int c);
//주머니에서 카드를 꺼낸다.
void keepprint(struct card** keep);
//keep안에 있는 구조체를 출력해주는 함수.


int investigate(struct card** setting);
//setting에 있는 숫자들이 맞는지 조사하는 함수.
//문제가 발생하지 않으면 1을 반환. 

void printsettingcard(struct card** setting);
//내려놓은 카드만 출력
//카드를 색깔별로 출력할 함수
//포인터 배열에는 새로운 배열함수가 존재(2차원 배열이라 생각) 

void printplayercard(struct playercard* playercards);
//플레이어의 카드를 출력 

//플레이어의 카드를 복사해주는 배열
void copyplayercard(struct card** playercards, struct card** virtual); 

void startrandom(struct card** playercards, struct card* cards);
//게임을 시작할 때 14장의 카드를 랜덤으로 나누어준다.
//플레이어에게 분배된 카드는 카드의 숫자를 0으로 만들어준다. 

void draw(struct card** playercards, struct card* cards);
//플레이어에게 랜덤으로 한장을 준다. 

int finish(struct card** playercards);
//플레이어가 몇장의 카드를 가졌는지 조사해주기.
//플레이어가 0장의 카드를 갖고 있으면 1로 반환.


void change(struct card** setting, int c);


int main(void) {
    system("color f0");
    int aaa = 0;
    int enrollcard = 0;
    char* blue = "blue";
    char* red = "red";
    char* black = "black";
    char* orange = "orange";
    struct card cards[106] = { {"blue",1,0,0},{"blue",2,0,0}, {"blue",3,0,0},{"blue",4,0,0}, {"blue",5,0,0},{"blue",6,0,0}, {"blue",7,0,0},{"blue",8,0,0}, {"blue",9,0,0},{"blue",10,0,0},{"blue",11,0,0},{"blue",12,0,0},{"blue",13,0,0},
       {"blue",1,0,0},{"blue",2,0,0}, {"blue",3,0,0},{"blue",4,0,0}, {"blue",5,0,0},{"blue",6,0,0}, {"blue",7,0,0},{"blue",8,0,0}, {"blue",9,0,0},{"blue",10,0,0},{"blue",11,0,0},{"blue",12,0,0},{"blue",13,0,0},
    {"red",1,0,0},{"red",2,0,0}, {"red",3,0,0},{"red",4,0,0}, {"red",5,0,0},{"red",6,0,0}, {"red",7,0,0},{"red",8,0,0}, {"red",9,0,0},{"red",10,0,0},{"red",11,0,0},{"red",12,0,0},{"red",13,0,0},
    {"red",1,0,0},{"red",2,0,0}, {"red",3,0,0},{"red",4,0,0}, {"red",5,0,0},{"red",6,0,0}, {"red",7,0,0},{"red",8,0,0}, {"red",9,0,0},{"red",10,0,0},{"red",11,0,0},{"red",12,0,0},{"red",13,0,0},
    {"black",1,0,0},{"black",2,0,0}, {"black",3,0,0},{"black",4,0,0}, {"black",5,0,0},{"black",6,0,0}, {"black",7,0,0},{"black",8,0,0}, {"black",9,0,0},{"black",10,0,0},{"black",11,0,0},{"black",12,0,0},{"black",13,0,0},
    {"black",1,0,0},{"black",2,0,0}, {"black",3,0,0},{"black",4,0,0}, {"black",5,0,0},{"black",6,0,0}, {"black",7,0,0},{"black",8,0,0}, {"black",9,0,0},{"black",10,0,0},{"black",11,0,0},{"black",12,0,0},{"black",13,0,0} ,
    {"orange",1,0,0},{"orange",2,0,0}, {"orange",3,0,0},{"orange",4,0,0}, {"orange",5,0,0},{"orange",6,0,0}, {"orange",7,0,0},{"orange",8,0,0}, {"orange",9,0,0},{"orange",10,0,0},{"orange",11,0,0},{"orange",12,0,0},{"orange",13,0,0},
    {"orange",1,0,0},{"orange",2,0,0}, {"orange",3,0,0},{"orange",4,0,0}, {"orange",5,0,0},{"orange",6,0,0}, {"orange",7,0,0},{"orange",8,0,0}, {"orange",9,0,0},{"orange",10,0,0},{"orange",11,0,0},{"orange",12,0,0},{"orange",13,0,0},
        {"jocker",0,1,0 }, {"jocker",0,1,0} };
    struct card* setting[35][15] = { 0 };
    //바닥에 깔려있는 카드들 

    int playernumber = 0;
    printf("게임할 인원을 입력해주세요.(2명 ~ 4명)");
    scanf_s("%d", &playernumber);//플레이어의 수 입력받기
    struct playercard playercards[4] = { 0 };
    for (int i = 0; i < playernumber; i++) {
        startrandom(playercards[i].owncard, cards);
        playercards[i].enroll = 0;
    }
    system("cls");
    printf("start game");
    Sleep(2000);
    system("cls");
    int turn = 0;//플레이어의 순서
    int control = 0;//차례에 무엇을 할 지 입력받기
    int check = 0;//순서를 넘겨도 되는지 확인
    int winner[4] = { 0 };
    int win = 0;
    int finishgame = 0;
    while (1 == 1) {
        struct card* keep[15] = { 0 };
        struct card* virtualkeep[15] = { 0 };
        //플레이어의 차례에 사용할 주머니
        enrollcard = 0;
        finishgame = 0;
        if (turn == playernumber)//순서를 반복하기 위해
            turn = 0;
        struct card* virtualsetting[33][15] = { 0 };
        //초기화를 대비하기 위해서 이용할 가상의 setting;
        struct card* virtualowncards[60] = { 0 };
        for (int i = 0; i < 33; i++) {
            for (int j = 0; j < 15; j++)
                virtualsetting[i][j] = setting[i][j];
        }
        copyplayercard(playercards[turn].owncard, virtualowncards); 

        if (playercards[turn].win == 1) {//플레이어의 카드 숫자가 0장이라면 다음 사람으로 넘어간다.
            turn++;
        }
        else {
            while (1 == 1) {
                int a = 0;
                int b = 0;
                int c = 0;
                struct card* d = 0;
                struct card* e = 0;
                check = 0;
                

                if (aaa == 1 || playercards[0].enroll == 1 || playercards[1].enroll == 1 || playercards[2].enroll == 1 || playercards[3].enroll == 1) {
                    printf("바닥에 있는 카드 : \n");
                    for (int i = 0; i < 33; i++) {
                        for (int j = 0; j < 15; j++) {
                            if (setting[i][j] != NULL) {
                                printf("%d번째 줄 : ", i);
                                printsettingcard(setting[i]);
                                break;
                            }
                        }
                    }
                    printf("===================================================================================\n");
                } 

                keepprint(keep);
                printf("player%d's card : ", turn + 1);
                printplayercard(&playercards[turn]);
                if (playercards[turn].enroll == 0) {
                    printf("1.내려놓기 2.XX 3.XX 4.조커바꾸기 5. 초기화 6. 카드 뽑기 7.턴 종료 8.clear\n");
                    while (1) {
                        scanf_s("%d", &control);
                        if (control != 2 && control != 3)
                            break;
                        printf("다시 입력해주세요.\n");
                    }
                }
                else {
                    printf("1.내려놓기 2.주머니에 넣기 3.주머니에서 꺼내기 4.조커바꾸기 5.초기화 6.카드 뽑기 7.턴 종료 8.clear\n");
                    while (1) {
                        scanf_s("%d", &control);
                        if (control >= 1 && control <= 7);
                        break;
                        printf("다시 입력해주세요.\n");
                    }
                }
                if (control == 1) { 

                    int playercardsize = 0;
                    for (int j = 0; j < 60; j++) {
                        if (playercards[turn].owncard[j] != NULL)
                            playercardsize++;
                    }
                    while (1) {
                        printf("몇 번째 카드를 내리실 건가요?(뒤로가기 : -1)\n");
                        scanf_s("%d", &a);
                        if (a == -1) {
                            break;
                        }
                        if ((a < 0) || (a > playercardsize - 1)) {
                            printf("다시 입력해주세요.\n");
                        }
                        else {
                            break;
                        }
                    }
                    if (a != -1) { 

                        printf("넣고 싶은 위치를 입력해주세요.\n");
                        scanf_s("%d %d", &b, &c);
                        if (setting[b][c] == NULL) {
                            setting[b][c] = playercards[turn].owncard[a]; 

                        }
                        else {
                            change(setting[b], c);
                            setting[b][c] = playercards[turn].owncard[a];
                        }
                        enrollcard = enrollcard + setting[b][c]->num;
                        for (int i = a; i < 59; i++) {
                            playercards[turn].owncard[i] = playercards[turn].owncard[i + 1];
                            playercards[turn].owncard[i + 1] = NULL;
                        }
                        aaa = 1;
                    } 

                } 

                else if (control == 2) { 

                    printf("1. 바닥 -> 주머니 (나가기: -1)\n");
                    scanf_s("%d", &c);
                    if (c == 1) {
                        printf("몇 번째 카드를 주머니로 넣겠습니까?(예시 : 4번째줄 5번째카드일 경우 '4 5'입력)\n");
                        scanf_s("%d %d", &a, &b);
                        if (setting[a][b] == NULL) {
                            printf("존재하지 않습니다.\n");
                            break;
                        }
                        putkeep(keep, setting[a][b]);
                        setting[a][b] = NULL;
                    }
                }




                else if (control == 3) { 

                    printf("몇 번째 카드를 주머니에서 꺼낼까요?(뒤로가기 : -1)\n");
                    scanf_s("%d", &a);
                    if (a == -1)
                        break;
                    else if (keep[a] == NULL) {
                        printf("%d번째에 존재하지 않습니다.\n",a);
                    }
                    else {
                        printf("넣고 싶은 위치를 입력해주세요.\n");
                        scanf_s("%d %d", &b, &c);
                        if (setting[b][c] == NULL) {
                            setting[b][c] = keep[a];
                        }
                        else {
                            change(setting[b], c);
                            setting[b][c] = keep[a]; 

                        }
                        keep[a] = NULL;
                        for (int i = a; i < 14; i++) {
                            if (keep[i + 1] != NULL) {
                                keep[i] = keep[i + 1];
                                keep[i + 1] = NULL;
                            }
                        }
                    }
                }
                else if (control == 4) {
                    printf("1.바닥 2.자신의 패(뒤로가기 : -1)\n");
                    scanf_s("%d", &a);
                    if (a == 1) {
                        while (1) {
                            printf("조커의 위치를 입력해주세요.\n");
                            scanf_s("%d %d", &a,&b);
                            if (setting[a][b]->jocker == 1) {
                                printf("현재 조커 : %s%d\n", setting[a][b]->color,setting[a][b]->num);
                                break;
                            }
                        }
                        if (a != -1) {
                            while (1) {
                                printf("1.blue\n2.red\n3.black\n4.orange\n원하는 색깔의 숫자를 입력해주세요.\n");
                                scanf_s("%d", &c);
                                if (1 <= c && c <= 4) {
                                    break;
                                }
                                else {
                                    printf("다시 입력해주세요.\n");
                                }
                            }
                            switch (c) { 

                            case 1:
                                setting[a][b]->color = blue;
                                break;
                            case 2:
                                setting[a][b]->color = red;
                                break;
                            case 3:
                                setting[a][b]->color = black;
                                break;
                            case 4:
                                setting[a][b]->color = orange;
                                break;
                            }
                            while (1) {
                                printf("원하는 숫자를 입력해주세요.\n");
                                scanf_s("%d", &c);
                                if (1 <= c && c <= 13) {
                                    setting[a][b]->num = c;
                                    break;
                                }
                                else {
                                    printf("다시 입력해주세요.\n");
                                } 

                            }
                        }
                    }
                    else if (a == 2) {
                        while (1) {
                            printf("조커의 위치를 입력해주세요.\n");
                            scanf_s("%d", &a);
                            if (a == -1) {
                                break;
                            }
                            else if ((playercards[turn].owncard[a])->jocker == 1) {
                                printf("현재 조커 : %s%d\n", playercards[turn].owncard[a]->color, playercards[turn].owncard[a]->num);
                                break;
                            }
                        }
                        if (a != -1) {
                            while (1) {
                                printf("1.blue\n2.red\n3.black\n4.orange\n원하는 색깔의 숫자를 입력해주세요.\n");
                                scanf_s("%d", &c);
                                if (1 <= c && c <= 4) {
                                    break;
                                }
                                else {
                                    printf("다시 입력해주세요.\n");
                                }
                            }
                            switch (c) { 

                            case 1:
                                (playercards[turn].owncard[a])->color = blue;
                                break;
                            case 2:
                                (playercards[turn].owncard[a])->color = red;
                                break;
                            case 3:
                                (playercards[turn].owncard[a])->color = black;
                                break;
                            case 4:
                                (playercards[turn].owncard[a])->color = orange;
                                break;
                            }
                            while (1) {
                                printf("원하는 숫자를 입력해주세요.\n");
                                scanf_s("%d", &c);
                                if (1 <= c && c <= 13) {
                                    (playercards[turn].owncard[a])->num = c;
                                    break;
                                }
                                else {
                                    printf("다시 입력해주세요.\n");
                                } 

                            }
                        }
                    }
                } 

                else if (control == 5) {
                    copyplayercard(virtualowncards, playercards[turn].owncard);
                    for (int i = 0; i < 33; i++) {
                        for (int j = 0; j < 15; j++)
                            setting[i][j] = virtualsetting[i][j];
                    }
                    for (int i = 0; i < 15; i++) {
                        keep[i] = NULL;
                    }
                    a = 0; b = 0; c = 0; d = 0; e = 0;
                    check = 0;
                    enrollcard = 0;
                    aaa = 0;
                } 

                else if (control == 6) {
                    copyplayercard(virtualowncards, playercards[turn].owncard);
                    for (int i = 0; i < 33; i++) {
                        for (int j = 0; j < 15; j++)
                            setting[i][j] = virtualsetting[i][j];
                    }
                    draw(playercards[turn].owncard, cards);
                    turn++; 

                    printf("5초가 지나면 다음 차례로 넘어갑니다.\n");
                    // Sleep(5000);
                    system("cls");
                    break;
                }
                else if (control == 7) {//enrollcard조사하기
                    int invest = 1;
                    //investigate함수대신 사용할 조건문 

                    for (int i = 0; i < 33; i++) {
                        a = 0;
                        for (int j = 0; j < 15; j++) {
                            if (setting[i][j] != NULL) {
                                a = 1;
                                break; 

                            }
                        }
                        if (a == 1) {
                            invest = investigate(setting[i]);
                        }
                        if (invest == 0) {
                            break;
                        }
                    } 

                    if (playercards[turn].enroll == 0) {
                        if (enrollcard >= 30 && invest == 1) {
                            playercards[turn].enroll = 1;
                            printf("5초가 지나면 다음 차례로 넘어갑니다.\n");
                            //Sleep(5000);
                            system("cls");
                            turn++;
                            break;
                        }
                        printf("턴을 종료할 수 없습니다.\n");
                    }
                    else {
                        if (invest == 1 && enrollcard >= 1) {
                            a = finish(playercards[turn].owncard);
                            if (a == 1) {
                                printf("축하합니다.");
                                playercards[turn].win = 1;
                                winner[win] = turn;
                                win++;
                                if (win == playernumber - 1) {
                                    printf("게임이 종료되었습니다.\n");
                                    Sleep(2000);
                                    for (int i = 0; i < playernumber; i++) {
                                        printf("%d등 : player%d\n", i, winner[i]);
                                    }
                                    return 0;
                                }
                            }
                            printf("5초가 지나면 다음 차례로 넘어갑니다.\n");
                            //Sleep(5000);
                            system("cls");
                            turn++; 

                            break;
                        }
                        printf("턴을 종료할 수 없습니다.\n");
                    }
                }
                else if (control == 8) {
                    system("cls");
                }
            }
        }
    }
}


void putkeep(struct card** keep, struct card* setting) {
    for (int i = 0; i < 15; i++) {
        if (keep[i] == NULL) {
            keep[i] = setting;
            break;
        }
        
    }
}
//주머니에 카드를 넣는다. 

void takeoutkepp(struct card* keep, struct card** setting, int c) {
    struct card* virtual[15] = { 0 };
    for (int i = c; i < 15; i++) {
        if (setting[i] != NULL)
            virtual[i] = setting[i];
    }
    if (setting[c] == NULL) {
        setting[c] = keep;
        keep = NULL;
    }
    else {
        for (int i = c + 1; i < 15; i++) {
            setting[i] = virtual[i - 1];
        }
        setting[c] = keep;
        keep = NULL;
    }
}
//주머니에서 카드를 꺼낸다 

void keepprint(struct card** keep) {
    if (keep[0] != NULL)
        printf("주머니에 있는 카드 : "); 

    for (int i = 0; i < 15; i++) {
        if (keep[i] == NULL)
            break;
        if (keep[i]->jocker == 1) {
            printf("jocker ");
        }
        else if (keep[i]->color != '\0') {
            printf("%s%d ", keep[i]->color, keep[i]->num);
        }
        else {
            printf("00 ");
        }
    }
    if (keep[0] != NULL)
        printf("\n===================================================================================\n");
}
/*
int a[35] = { 0 };
    int b[35] = { 0 };
    int k = 0;
    int l = 0;
    int d = 0;
    int aa = 0;
    int invest = 0;
    for (int i = 0; i < 35; i++) {
        for (int j = 0; j < 15; j++) {
            if (setting[i][j] != NULL) {
                a[i] = 1;
                b[i] = i;
                break;
            }
        }
    }
    for (int i = 0; i < 35; i++) {
        l = 0;
        if (a[i] == 1) {
            for (int j = b[i]; j < 15; j++) {
                if (setting[i][j] != NULL) {
                    if (setting[i][j]->color == setting[i][j]->color) {
                        l = 1;
                    }
                    else if (setting[i][j]->num + 1 == setting[i][j]->num)
                        aa = 1;
                }



                //두가지로 나누어서 들어가기
                //조사방법생각해보기 

            }
        }
    }
    for (int i = 0; i < 35; i++) {
        k = 0;
        l = 0;
        d = 0;
        if (a[i] == 1) {
            for (int j = b[i]; j < 15; j++) {
                if (l == 1) {
                    for (int e = 0; e < 4; e++) {
                        if (setting[i][j] != NULL) {
                            d++;
                        }
                    }
                    for (int e = b[i]; e < b[i] + d; e++) {
                        for (int f = e + 1; f < b[i] + d; f++) {
                            if (setting[i][e]->color == setting[i][f]->color) {
                                return -1;
                            } 

                        }
                    }
                }
                else if (l == 0) {
                    for (int e = 0; e < 4; e++) {
                        if (setting[i][e] != NULL) {
                            d++;
                        }
                    }
                    if (aa == 0) {
                        for (int e = b[i]; e < b[i] + d - 1; e++) {
                            if (setting[i][e] + 1 != setting[i][e + 1])
                                return -1;
                        } 

                    }
                    else {
                        for (int e = b[i]; e < b[i] + d - 1; e++) {
                            if (setting[i][e] - 1 != setting[i][e + 1])
                                return -1;
                        }
                    }
                }
            }
        }
    }
    return 0;
*/ 

int investigate(struct card** setting) {
    int a = 0;
    int b = 0;
    int c = 0;
    int d = 0;
    int e = 0;
    int g = 0;
    for (int i = 0; i < 15; i++) {
        if (setting[i] != NULL) {
            a = i;
            break;
        }
    } 

    for (int i = a; i < 15; i++) {
        if (setting[i] != NULL)
            d++;
    } 

    if (setting[a]->num != setting[a + 1]->num) {
        b = 1;
        if (setting[a]->num < setting[a + 1]->num)
            c = 1;
    }
    if (b == 1) {
        if (c == 1) {
            for (int i = a; i < a + d - 1; i++) {
                if (setting[i]->num + 1 == setting[i + 1]->num)
                    e = i - a + 2;
                else if (setting[i]->num + 1 != setting[i + 1]->num || setting[i]->color != setting[i + 1]->color)
                    return 0;
            }
        }
        else {
            for (int i = a; i < a + d - 1; i++) {
                if (setting[i]->num == setting[i + 1]->num + 1)
                    e = i - a + 2;
                else if (setting[i]->num != setting[i + 1]->num + 1 || setting[i]->color != setting[i + 1]->color)
                    return 0;
            }
        }
    }
    else {
        for (int i = a; i < a + d; i++) {
            for (int j = i + 1; j < a + d; j++) {
                if (setting[a]->color == setting[j]->color)
                    g = 1;
            }
            e++;
        }
    }
    if (e >= 3 && g == 0) {
        return 1;
    }
    return 0; 

}
//setting에 있는 숫자들이 맞는지 조사하는 함수.
//문제가 발생하지 않으면 1을 반환.


void printsettingcard(struct card** setting) {
    int a = 0;
    int b = 0;
    for (int i = 0; i < 15; i++) {
        if (setting[i] != NULL) {
            a = 1;
            if (setting[i]->jocker == 1)
                printf("jocker ");
            else
                printf("%s%d ", setting[i]->color, setting[i]->num);
        }
        else {
            printf("00 ");
        }
    }
    if (a == 1) {
        printf("\n");
    }
}


void printplayercard(struct playercard* playercards) {
    for (int i = 0; i < 60; i++) { 

        if (i % 10 == 0 && i != 0)
            if (playercards->owncard[i] != NULL)
                printf("\n");


        if (playercards->owncard[i] == NULL) { 

        }
        else if (playercards->owncard[i]->jocker == 1)
            printf("jocker ");
        else if (playercards->owncard[i]->color != '\0')
            printf("%s%d ", playercards->owncard[i]->color, playercards->owncard[i]->num);
    }
    printf("\n");
} 

void copyplayercard(struct card** playercards, struct card** virtual) {
    for (int i = 0; i < 60; i++) {
        virtual[i] = playercards[i];
    }
} 

/*
startrandom(playercards[i].owncard, cards);
*/
void startrandom(struct card** players, struct card* cards) {
    int a = 0;
    for (int i = 0; i < 14; i++) {
        while (1 == 1) {
            a = rand() % 106;
            if (cards[a].use == 0)
                break;
        }
        players[i] = &cards[a];
        cards[a].use = 1;
    }
} 

void draw(struct card** playercards, struct card* cards) {
    int a = 0; int b = 0;
    for (int i = 0; i < 60; i++) {
        if (playercards[i] != NULL)
            a++;
    }
    while (1 == 1) {
        b = rand() % 106;
        if (cards[b].use == 0)
            break;
    }
    playercards[a] = &cards[b]; 

    cards[b].use = 1;
}
//플레이어에게 랜덤으로 한장을 준다. 

int finish(struct card** playercards) {
    int a = 1;
    for (int i = 0; i < 60; i++) {
        if (playercards[i] != NULL)
            a = 0;
    }
    return a;
}
//플레이어가 몇장의 카드를 가졌는지 조사해주기.
//카드가 없으면 1로 반환. 

void change(struct card** setting, int c) {
    struct card* virtual[15] = { 0 };
    for (int i = c; i < 15; i++) {
        if(setting[i] != NULL)
            virtual[i] = setting[i];
    }
    for (int i = c + 1; i < 15; i++) {
        setting[i] = virtual[i - 1];
    }
}
